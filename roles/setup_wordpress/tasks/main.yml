---
# TODO List...
# Install packages required for querying MySQL/MariaDB
# Install Wordpress CLI
# Install Wordpress CLI Bash Completion
# Download and install the latest version of wordpress
# Configure wordpress to connect to the database
# Restart the relevant services if configuration parameters change

- name: Install mariadb-client
  ansible.builtin.apt:
    name: mariadb-client
    state: present

- name: Get WP-CLI
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    dest: /usr/local/bin/wp
    mode: "0777"

- name: Get WP-CLI bash completion
  ansible.builtin.get_url:
    url: https://github.com/wp-cli/wp-cli/raw/master/utils/wp-completion.bash
    dest: /etc/bash_completion.d

- name: Create temporary build directory
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: setup_wordpress_tempdir

- name: Get latest Wordpress version
  ansible.builtin.get_url:
    url: https://wordpress.org/latest.tar.gz
    dest: "{{ setup_wordpress_tempdir.path }}/"
    owner: "{{ site_application_username }}"
    group: "{{ site_application_groupname }}"
  register: setup_wordpress_package

- name: Unpack the WordPress bundle
  ansible.builtin.unarchive:
    src: "{{ setup_wordpress_package.dest }}"
    dest: "{{ setup_wordpress_tempdir.path }}"
    remote_src: true
    owner: "{{ site_application_username }}"
    group: "{{ site_application_groupname }}"
    mode: "0755"

- name: Copy the wordpress application to the public_html folder
  ansible.builtin.copy:
    src: "{{ setup_wordpress_tempdir.path }}/wordpress/"
    dest: "{{ wordpress_application_path }}/"
    remote_src: true
    directory_mode: true
    owner: "{{ site_application_username }}"
    group: "{{ site_application_groupname }}"
    mode: "0755"

- name: Configure wp-config.php
  ansible.builtin.template:
    src: templates/wp-config.php.j2
    dest: "{{ wordpress_application_path }}/wp-config.php"
    owner: "{{ site_application_username }}"
    group: "{{ site_application_groupname }}"
    mode: "0640"
  vars:
    mysql_db: "{{ mysql_wordpress_database }}"
    mysql_user: "{{ mysql_wordpress_username }}"
    mysql_password: "{{ mysql_wordpress_password }}"
    mysql_host: "{{ hostvars[ groups['dbserver'] | first ].private_ip }}"
  notify: reload php

- name: Set the correct ownership of the wordpress application folder
  ansible.builtin.file:
    path: "/var/www/html/wordpress"
    state: directory
    mode: "0744"
    owner: "{{ site_application_username }}"
    group: "{{ site_application_groupname }}"
  notify: restart php

- name: Remove tempdir
  ansible.builtin.file:
    path: "{{ setup_wordpress_tempdir.path }}"
    state: absent
  when: setup_wordpress_tempdir.path is defined

...
